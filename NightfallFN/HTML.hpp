#pragma once

namespace HTML
{
	const char* home_html = R"(<!DOCTYPE html><html lang=\"en\">    <head>        <meta charset=\"UTF-8\">        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">        <title>NightfallFN</title>        <style>            body {                margin: 0;                padding: 0;                font-family: Arial, sans-serif;            }            .window {                width: 300px;                min-width: 200px; /* Set minimum width */                max-width: 500px; /* Set maximum width */                height: 200px;                min-height: 150px; /* Set minimum height */                max-height: 400px; /* Set maximum height */                border: 1px solid #000;                border-radius: 5px;                background-color: #f0f0f0;                position: absolute;                top: 50px; /* Initial distance from the top */                left: 50px; /* Initial distance from the left */                overflow: hidden; /* Hide content overflow */            }            .title-bar {                height: 30px;                background-color: #0078d7;                color: #fff;                font-weight: bold;                padding: 5px;                cursor: move;                border-top-left-radius: 5px;                border-top-right-radius: 5px;            }            .content {                padding: 10px;                overflow: auto;            }            .resize-handle {                position: absolute;                width: 10px;                height: 10px;                background-color: #000;                cursor: nwse-resize; /* Set cursor to indicate resize direction */                bottom: 0;                right: 0;            }            .branding {                position: absolute;                bottom: 10px;                left: 50%;                transform: translateX(-50%);                font-size: 14px;                color: #666;            }        </style>    </head>    <body>        <div class=\"window\" id=\"window1\">                    <div class=\"title-bar\">NoRecoil</div>                    <div class=\"content\">                <!-- Content for NoRecoil window goes here -->                <input type=\"range\" min=\"0\" max=\"10\" value=\"2\" id=\"nr_magSlider\">                <input type=\"checkbox\" id=\"nr_enabled\" name=\"nr_enabled\">                <label for=\"nr_enabled\">Enabled</label>            </div>                    <div class=\"resize-handle\" id=\"resizeHandle1\"></div>        </div>        <div class=\"window\" id=\"window2\">                    <div class=\"title-bar\">BloomReducer</div>                    <div class=\"content\">                <!-- Content for BloomReducer window goes here -->            </div>                    <div class=\"resize-handle\" id=\"resizeHandle2\"></div>        </div>        <div class=\"window\" id=\"window3\">                    <div class=\"title-bar\">FastPickup</div>                    <div class=\"content\">                <!-- Content for FastPickup window goes here -->            </div>                    <div class=\"resize-handle\" id=\"resizeHandle3\"></div>        </div>        <div class=\"branding\">            NightfallFN        </div>        <!-- Window code -->        <script>            // Function to handle mousedown event for moving the window            function handleMouseDown(event) {                let targetWindow = this.parentElement;                let startX = event.clientX - targetWindow.offsetLeft;                let startY = event.clientY - targetWindow.offsetTop;                function moveWindow(event) {                let newX = event.clientX - startX;                let newY = event.clientY - startY;                targetWindow.style.left = newX + 'px';                targetWindow.style.top = newY + 'px';                }                function stopMove() {                window.removeEventListener('mousemove', moveWindow);                window.removeEventListener('mouseup', stopMove);                }                window.addEventListener('mousemove', moveWindow);                window.addEventListener('mouseup', stopMove);            }            // Function to handle mousedown event on resize handle            function handleResizeMouseDown(event) {                let targetWindow = this.parentElement;                let startX = event.clientX;                let startY = event.clientY;                let startWidth = parseInt(document.defaultView.getComputedStyle(targetWindow).width, 10);                let startHeight = parseInt(document.defaultView.getComputedStyle(targetWindow).height, 10);                function resizeWindow(event) {                let width = startWidth + (event.clientX - startX);                let height = startHeight + (event.clientY - startY);                targetWindow.style.width = width + 'px';                targetWindow.style.height = height + 'px';                }                function stopResize() {                window.removeEventListener('mousemove', resizeWindow);                window.removeEventListener('mouseup', stopResize);                }                window.addEventListener('mousemove', resizeWindow);                window.addEventListener('mouseup', stopResize);            }            // Get all the windows and resize handles            var windows = document.querySelectorAll('.window');            var resizeHandles = document.querySelectorAll('.resize-handle');            // Add event listeners to each window for moving            windows.forEach(function(window) {                let titleBar = window.querySelector('.title-bar');                titleBar.addEventListener('mousedown', handleMouseDown);            });            // Add event listeners to each resize handle for resizing            resizeHandles.forEach(function(handle) {                handle.addEventListener('mousedown', handleResizeMouseDown);            });        </script>        <!-- WebSocket code -->        <script>            const socket = new WebSocket(\"ws://127.0.0.1:90\");            socket.onopen = (event) => {                console.log(\"WebSocket connection opened.\");            }            socket.onclose = (event) => {                console.log(\"WebSocket connection closed.\");            }            // Now we move on to the NoRecoil elements            const nr_magSlider = document.getElementById(\"nr_magSlider\");            const nr_enabledCheckbox = document.getElementById(\"nr_enabled\")            nr_magSlider.addEventListener(\"input\", (event) => {                const sliderValue = event.target.value;                const data = {                    \"module\": \"noRecoil\",                    \"changes\": [                        {                            \"setting\": \"recoilMagnitude\",                            \"value\": parseInt(sliderValue)                        }                    ]                };                const dataAsString = JSON.stringify(data);                socket.send(dataAsString);            });            nr_enabledCheckbox.addEventListener(\"change\", (event) => {                const data = {                    \"module\": \"noRecoil\",                    \"changes\": [                        {                            \"setting\": \"isEnabled\",                            \"value\": nr_enabledCheckbox.checked                        }                    ]                }            });        </script>    </body></html>)";
};